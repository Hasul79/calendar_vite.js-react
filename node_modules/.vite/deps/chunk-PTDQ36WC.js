import {
  getOverlayAlpha
} from "./chunk-6I2J4R3R.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  alpha,
  colorChannel,
  createCssVarsProvider,
  createGetCssVar,
  createTheme_default,
  createTypography,
  darken,
  deepmerge,
  emphasize,
  init_createTheme,
  init_createTransitions,
  init_createTypography,
  init_esm,
  init_esm2,
  init_extends,
  init_objectWithoutPropertiesLoose,
  init_styled,
  init_useThemeProps,
  lighten,
  require_prop_types,
  useThemeProps2 as useThemeProps
} from "./chunk-6QJMLH2I.js";
import {
  require_jsx_runtime
} from "./chunk-D2LIDDPY.js";
import {
  require_react
} from "./chunk-IGOAJGOA.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@mui/x-date-pickers/LocalizationProvider/LocalizationProvider.js
init_extends();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/material/styles/adaptV4Theme.js
init_extends();
init_objectWithoutPropertiesLoose();
init_esm2();

// node_modules/@mui/material/styles/index.js
init_esm2();
init_createTheme();

// node_modules/@mui/material/styles/createMuiStrictModeTheme.js
init_esm();
init_createTheme();

// node_modules/@mui/material/styles/cssUtils.js
function getUnit(input) {
  return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || "";
}
function toUnitless(length) {
  return parseFloat(length);
}

// node_modules/@mui/material/styles/responsiveFontSizes.js
init_extends();
init_esm();

// node_modules/@mui/material/styles/index.js
init_createTransitions();
init_useThemeProps();
init_styled();
init_styled();

// node_modules/@mui/material/styles/ThemeProvider.js
init_esm2();

// node_modules/@mui/material/styles/index.js
init_esm2();

// node_modules/@mui/material/styles/makeStyles.js
init_esm();

// node_modules/@mui/material/styles/withStyles.js
init_esm();

// node_modules/@mui/material/styles/withTheme.js
init_esm();

// node_modules/@mui/material/styles/CssVarsProvider.js
init_extends();
init_esm2();

// node_modules/@mui/material/styles/experimental_extendTheme.js
init_extends();
init_objectWithoutPropertiesLoose();
init_esm();
init_esm2();
init_createTheme();
var _excluded = ["colorSchemes", "cssVarPrefix"];
var _excluded2 = ["palette"];
var defaultDarkOverlays = [...Array(25)].map((_, index) => {
  if (index === 0) {
    return void 0;
  }
  const overlay = getOverlayAlpha(index);
  return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
});
function assignNode(obj, keys) {
  keys.forEach((k) => {
    if (!obj[k]) {
      obj[k] = {};
    }
  });
}
function setColor(obj, key, defaultValue) {
  obj[key] = obj[key] || defaultValue;
}
var createGetCssVar2 = (cssVarPrefix = "mui") => createGetCssVar(cssVarPrefix);
function extendTheme(options = {}, ...args) {
  var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$da2, _colorSchemesInput$da3;
  const {
    colorSchemes: colorSchemesInput = {},
    cssVarPrefix = "mui"
  } = options, input = _objectWithoutPropertiesLoose(options, _excluded);
  const getCssVar = createGetCssVar2(cssVarPrefix);
  const _createThemeWithoutVa = createTheme_default(_extends({}, input, colorSchemesInput.light && {
    palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette
  })), {
    palette: lightPalette
  } = _createThemeWithoutVa, muiTheme = _objectWithoutPropertiesLoose(_createThemeWithoutVa, _excluded2);
  const {
    palette: darkPalette
  } = createTheme_default({
    palette: _extends({
      mode: "dark"
    }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)
  });
  let theme = _extends({}, muiTheme, {
    cssVarPrefix,
    getCssVar,
    colorSchemes: _extends({}, colorSchemesInput, {
      light: _extends({}, colorSchemesInput.light, {
        palette: lightPalette,
        opacity: _extends({
          inputPlaceholder: 0.42,
          inputUnderline: 0.42,
          switchTrackDisabled: 0.12,
          switchTrack: 0.38
        }, (_colorSchemesInput$li2 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li2.opacity),
        overlays: ((_colorSchemesInput$li3 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li3.overlays) || []
      }),
      dark: _extends({}, colorSchemesInput.dark, {
        palette: darkPalette,
        opacity: _extends({
          inputPlaceholder: 0.5,
          inputUnderline: 0.7,
          switchTrackDisabled: 0.2,
          switchTrack: 0.3
        }, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da2.opacity),
        overlays: ((_colorSchemesInput$da3 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da3.overlays) || defaultDarkOverlays
      })
    })
  });
  Object.keys(theme.colorSchemes).forEach((key) => {
    const palette = theme.colorSchemes[key].palette;
    if (key === "light") {
      setColor(palette.common, "background", "#fff");
      setColor(palette.common, "onBackground", "#000");
    } else {
      setColor(palette.common, "background", "#000");
      setColor(palette.common, "onBackground", "#fff");
    }
    assignNode(palette, ["Alert", "AppBar", "Avatar", "Chip", "FilledInput", "LinearProgress", "Skeleton", "Slider", "SnackbarContent", "SpeedDialAction", "StepConnector", "StepContent", "Switch", "TableCell", "Tooltip"]);
    if (key === "light") {
      setColor(palette.Alert, "errorColor", darken(palette.error.light, 0.6));
      setColor(palette.Alert, "infoColor", darken(palette.info.light, 0.6));
      setColor(palette.Alert, "successColor", darken(palette.success.light, 0.6));
      setColor(palette.Alert, "warningColor", darken(palette.warning.light, 0.6));
      setColor(palette.Alert, "errorFilledBg", getCssVar("palette-error-main"));
      setColor(palette.Alert, "infoFilledBg", getCssVar("palette-info-main"));
      setColor(palette.Alert, "successFilledBg", getCssVar("palette-success-main"));
      setColor(palette.Alert, "warningFilledBg", getCssVar("palette-warning-main"));
      setColor(palette.Alert, "errorFilledColor", lightPalette.getContrastText(palette.error.main));
      setColor(palette.Alert, "infoFilledColor", lightPalette.getContrastText(palette.info.main));
      setColor(palette.Alert, "successFilledColor", lightPalette.getContrastText(palette.success.main));
      setColor(palette.Alert, "warningFilledColor", lightPalette.getContrastText(palette.warning.main));
      setColor(palette.Alert, "errorStandardBg", lighten(palette.error.light, 0.9));
      setColor(palette.Alert, "infoStandardBg", lighten(palette.info.light, 0.9));
      setColor(palette.Alert, "successStandardBg", lighten(palette.success.light, 0.9));
      setColor(palette.Alert, "warningStandardBg", lighten(palette.warning.light, 0.9));
      setColor(palette.Alert, "errorIconColor", getCssVar("palette-error-light"));
      setColor(palette.Alert, "infoIconColor", getCssVar("palette-info-light"));
      setColor(palette.Alert, "successIconColor", getCssVar("palette-success-light"));
      setColor(palette.Alert, "warningIconColor", getCssVar("palette-warning-light"));
      setColor(palette.AppBar, "defaultBg", getCssVar("palette-grey-100"));
      setColor(palette.Avatar, "defaultBg", getCssVar("palette-grey-400"));
      setColor(palette.Chip, "defaultBorder", getCssVar("palette-grey-400"));
      setColor(palette.Chip, "defaultAvatarColor", getCssVar("palette-grey-700"));
      setColor(palette.Chip, "defaultIconColor", getCssVar("palette-grey-700"));
      setColor(palette.FilledInput, "bg", "rgba(0, 0, 0, 0.06)");
      setColor(palette.FilledInput, "hoverBg", "rgba(0, 0, 0, 0.09)");
      setColor(palette.FilledInput, "disabledBg", "rgba(0, 0, 0, 0.12)");
      setColor(palette.LinearProgress, "primaryBg", lighten(palette.primary.main, 0.62));
      setColor(palette.LinearProgress, "secondaryBg", lighten(palette.secondary.main, 0.62));
      setColor(palette.LinearProgress, "errorBg", lighten(palette.error.main, 0.62));
      setColor(palette.LinearProgress, "infoBg", lighten(palette.info.main, 0.62));
      setColor(palette.LinearProgress, "successBg", lighten(palette.success.main, 0.62));
      setColor(palette.LinearProgress, "warningBg", lighten(palette.warning.main, 0.62));
      setColor(palette.Skeleton, "bg", `rgba(${getCssVar("palette-text-primaryChannel")} / 0.11)`);
      setColor(palette.Slider, "primaryTrack", lighten(palette.primary.main, 0.62));
      setColor(palette.Slider, "secondaryTrack", lighten(palette.secondary.main, 0.62));
      setColor(palette.Slider, "errorTrack", lighten(palette.error.main, 0.62));
      setColor(palette.Slider, "infoTrack", lighten(palette.info.main, 0.62));
      setColor(palette.Slider, "successTrack", lighten(palette.success.main, 0.62));
      setColor(palette.Slider, "warningTrack", lighten(palette.warning.main, 0.62));
      const snackbarContentBackground = emphasize(palette.background.default, 0.8);
      setColor(palette.SnackbarContent, "bg", snackbarContentBackground);
      setColor(palette.SnackbarContent, "color", lightPalette.getContrastText(snackbarContentBackground));
      setColor(palette.SpeedDialAction, "fabHoverBg", emphasize(palette.background.paper, 0.15));
      setColor(palette.StepConnector, "border", getCssVar("palette-grey-400"));
      setColor(palette.StepContent, "border", getCssVar("palette-grey-400"));
      setColor(palette.Switch, "defaultColor", getCssVar("palette-common-white"));
      setColor(palette.Switch, "defaultDisabledColor", getCssVar("palette-grey-100"));
      setColor(palette.Switch, "primaryDisabledColor", lighten(palette.primary.main, 0.62));
      setColor(palette.Switch, "secondaryDisabledColor", lighten(palette.secondary.main, 0.62));
      setColor(palette.Switch, "errorDisabledColor", lighten(palette.error.main, 0.62));
      setColor(palette.Switch, "infoDisabledColor", lighten(palette.info.main, 0.62));
      setColor(palette.Switch, "successDisabledColor", lighten(palette.success.main, 0.62));
      setColor(palette.Switch, "warningDisabledColor", lighten(palette.warning.main, 0.62));
      setColor(palette.TableCell, "border", lighten(alpha(palette.divider, 1), 0.88));
      setColor(palette.Tooltip, "bg", alpha(palette.grey[700], 0.92));
    } else {
      setColor(palette.Alert, "errorColor", lighten(palette.error.light, 0.6));
      setColor(palette.Alert, "infoColor", lighten(palette.info.light, 0.6));
      setColor(palette.Alert, "successColor", lighten(palette.success.light, 0.6));
      setColor(palette.Alert, "warningColor", lighten(palette.warning.light, 0.6));
      setColor(palette.Alert, "errorFilledBg", getCssVar("palette-error-dark"));
      setColor(palette.Alert, "infoFilledBg", getCssVar("palette-info-dark"));
      setColor(palette.Alert, "successFilledBg", getCssVar("palette-success-dark"));
      setColor(palette.Alert, "warningFilledBg", getCssVar("palette-warning-dark"));
      setColor(palette.Alert, "errorFilledColor", darkPalette.getContrastText(palette.error.dark));
      setColor(palette.Alert, "infoFilledColor", darkPalette.getContrastText(palette.info.dark));
      setColor(palette.Alert, "successFilledColor", darkPalette.getContrastText(palette.success.dark));
      setColor(palette.Alert, "warningFilledColor", darkPalette.getContrastText(palette.warning.dark));
      setColor(palette.Alert, "errorStandardBg", darken(palette.error.light, 0.9));
      setColor(palette.Alert, "infoStandardBg", darken(palette.info.light, 0.9));
      setColor(palette.Alert, "successStandardBg", darken(palette.success.light, 0.9));
      setColor(palette.Alert, "warningStandardBg", darken(palette.warning.light, 0.9));
      setColor(palette.Alert, "errorIconColor", getCssVar("palette-error-main"));
      setColor(palette.Alert, "infoIconColor", getCssVar("palette-info-main"));
      setColor(palette.Alert, "successIconColor", getCssVar("palette-success-main"));
      setColor(palette.Alert, "warningIconColor", getCssVar("palette-warning-main"));
      setColor(palette.AppBar, "defaultBg", getCssVar("palette-grey-900"));
      setColor(palette.AppBar, "darkBg", getCssVar("palette-background-paper"));
      setColor(palette.AppBar, "darkColor", getCssVar("palette-text-primary"));
      setColor(palette.Avatar, "defaultBg", getCssVar("palette-grey-600"));
      setColor(palette.Chip, "defaultBorder", getCssVar("palette-grey-700"));
      setColor(palette.Chip, "defaultAvatarColor", getCssVar("palette-grey-300"));
      setColor(palette.Chip, "defaultIconColor", getCssVar("palette-grey-300"));
      setColor(palette.FilledInput, "bg", "rgba(255, 255, 255, 0.09)");
      setColor(palette.FilledInput, "hoverBg", "rgba(255, 255, 255, 0.13)");
      setColor(palette.FilledInput, "disabledBg", "rgba(255, 255, 255, 0.12)");
      setColor(palette.LinearProgress, "primaryBg", darken(palette.primary.main, 0.5));
      setColor(palette.LinearProgress, "secondaryBg", darken(palette.secondary.main, 0.5));
      setColor(palette.LinearProgress, "errorBg", darken(palette.error.main, 0.5));
      setColor(palette.LinearProgress, "infoBg", darken(palette.info.main, 0.5));
      setColor(palette.LinearProgress, "successBg", darken(palette.success.main, 0.5));
      setColor(palette.LinearProgress, "warningBg", darken(palette.warning.main, 0.5));
      setColor(palette.Skeleton, "bg", `rgba(${getCssVar("palette-text-primaryChannel")} / 0.13)`);
      setColor(palette.Slider, "primaryTrack", darken(palette.primary.main, 0.5));
      setColor(palette.Slider, "secondaryTrack", darken(palette.secondary.main, 0.5));
      setColor(palette.Slider, "errorTrack", darken(palette.error.main, 0.5));
      setColor(palette.Slider, "infoTrack", darken(palette.info.main, 0.5));
      setColor(palette.Slider, "successTrack", darken(palette.success.main, 0.5));
      setColor(palette.Slider, "warningTrack", darken(palette.warning.main, 0.5));
      const snackbarContentBackground = emphasize(palette.background.default, 0.98);
      setColor(palette.SnackbarContent, "bg", snackbarContentBackground);
      setColor(palette.SnackbarContent, "color", darkPalette.getContrastText(snackbarContentBackground));
      setColor(palette.SpeedDialAction, "fabHoverBg", emphasize(palette.background.paper, 0.15));
      setColor(palette.StepConnector, "border", getCssVar("palette-grey-600"));
      setColor(palette.StepContent, "border", getCssVar("palette-grey-600"));
      setColor(palette.Switch, "defaultColor", getCssVar("palette-grey-300"));
      setColor(palette.Switch, "defaultDisabledColor", getCssVar("palette-grey-600"));
      setColor(palette.Switch, "primaryDisabledColor", darken(palette.primary.main, 0.55));
      setColor(palette.Switch, "secondaryDisabledColor", darken(palette.secondary.main, 0.55));
      setColor(palette.Switch, "errorDisabledColor", darken(palette.error.main, 0.55));
      setColor(palette.Switch, "infoDisabledColor", darken(palette.info.main, 0.55));
      setColor(palette.Switch, "successDisabledColor", darken(palette.success.main, 0.55));
      setColor(palette.Switch, "warningDisabledColor", darken(palette.warning.main, 0.55));
      setColor(palette.TableCell, "border", darken(alpha(palette.divider, 1), 0.68));
      setColor(palette.Tooltip, "bg", alpha(palette.grey[700], 0.92));
    }
    palette.common.backgroundChannel = colorChannel(palette.common.background);
    palette.common.onBackgroundChannel = colorChannel(palette.common.onBackground);
    palette.dividerChannel = colorChannel(palette.divider);
    Object.keys(palette).forEach((color) => {
      const colors = palette[color];
      if (colors.main) {
        palette[color].mainChannel = colorChannel(colors.main);
      }
      if (colors.light) {
        palette[color].lightChannel = colorChannel(colors.light);
      }
      if (colors.dark) {
        palette[color].darkChannel = colorChannel(colors.dark);
      }
      if (colors.contrastText) {
        palette[color].contrastTextChannel = colorChannel(colors.contrastText);
      }
      if (colors.primary) {
        palette[color].primaryChannel = colorChannel(colors.primary);
      }
      if (colors.secondary) {
        palette[color].secondaryChannel = colorChannel(colors.secondary);
      }
      if (colors.active) {
        palette[color].activeChannel = colorChannel(colors.active);
      }
      if (colors.selected) {
        palette[color].selectedChannel = colorChannel(colors.selected);
      }
    });
  });
  theme = args.reduce((acc, argument) => deepmerge(acc, argument), theme);
  return theme;
}

// node_modules/@mui/material/styles/CssVarsProvider.js
init_createTypography();
var shouldSkipGeneratingVar = (keys) => {
  var _keys$;
  return !!keys[0].match(/(typography|mixins|breakpoints|direction|transitions)/) || keys[0] === "palette" && !!((_keys$ = keys[1]) != null && _keys$.match(/(mode|contrastThreshold|tonalOffset)/));
};
var defaultTheme = extendTheme();
var {
  CssVarsProvider,
  useColorScheme,
  getInitColorSchemeScript
} = createCssVarsProvider({
  theme: defaultTheme,
  attribute: "data-mui-color-scheme",
  modeStorageKey: "mui-mode",
  colorSchemeStorageKey: "mui-color-scheme",
  defaultColorScheme: {
    light: "light",
    dark: "dark"
  },
  resolveTheme: (theme) => {
    const newTheme = _extends({}, theme, {
      typography: createTypography(theme.palette, theme.typography)
    });
    return newTheme;
  },
  shouldSkipGeneratingVar
});

// node_modules/@mui/x-date-pickers/locales/utils/getPickersLocalization.js
init_extends();
var getPickersLocalization = (pickersTranslations) => {
  return {
    components: {
      MuiLocalizationProvider: {
        defaultProps: {
          localeText: _extends({}, pickersTranslations)
        }
      }
    }
  };
};

// node_modules/@mui/x-date-pickers/locales/nlNL.js
var nlNLPickers = {
  previousMonth: "Vorige maand",
  nextMonth: "Volgende maand",
  openPreviousView: "open vorige view",
  openNextView: "open volgende view",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "jaarweergave is geopend, schakel over naar kalenderweergave" : "kalenderweergave is geopend, switch naar jaarweergave",
  start: "Start",
  end: "Einde",
  cancelButtonLabel: "Annuleren",
  clearButtonLabel: "Resetten",
  okButtonLabel: "OK",
  todayButtonLabel: "Vandaag",
  clockLabelText: (view, time, adapter) => `Selecteer ${view}. ${time === null ? "Geen tijd geselecteerd" : `Geselecteerde tijd is ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} uren`,
  minutesClockNumberText: (minutes) => `${minutes} minuten`,
  secondsClockNumberText: (seconds) => `${seconds} seconden`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Kies datum, geselecteerde datum is ${utils.format(utils.date(rawValue), "fullDate")}` : "Kies datum",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Kies tijd, geselecteerde tijd is ${utils.format(utils.date(rawValue), "fullTime")}` : "Kies tijd",
  timeTableLabel: "kies tijd",
  dateTableLabel: "kies datum"
};
var nlNL = getPickersLocalization(nlNLPickers);

// node_modules/@mui/x-date-pickers/locales/ptBR.js
var ptBRPickers = {
  previousMonth: "M\xEAs anterior",
  nextMonth: "Pr\xF3ximo m\xEAs",
  openPreviousView: "Abrir pr\xF3xima sele\xE7\xE3o",
  openNextView: "Abrir sele\xE7\xE3o anterior",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "Sele\xE7\xE3o de ano est\xE1 aberta, alternando para sele\xE7\xE3o de calend\xE1rio" : "Sele\xE7\xE3o de calend\xE1rios est\xE1 aberta, alternando para sele\xE7\xE3o de ano",
  start: "In\xEDcio",
  end: "Fim",
  cancelButtonLabel: "Cancelar",
  clearButtonLabel: "Limpar",
  okButtonLabel: "OK",
  todayButtonLabel: "Hoje",
  clockLabelText: (view, time, adapter) => `Selecione ${view}. ${time === null ? "Hora n\xE3o selecionada" : `Selecionado a hora ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} horas`,
  minutesClockNumberText: (minutes) => `${minutes} minutos`,
  secondsClockNumberText: (seconds) => `${seconds} segundos`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma data, data selecionada ${utils.format(utils.date(rawValue), "fullDate")}` : "Escolha uma data",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma hora, hora selecionada ${utils.format(utils.date(rawValue), "fullTime")}` : "Escolha uma hora",
  timeTableLabel: "escolha uma hora",
  dateTableLabel: "escolha uma data"
};
var ptBR = getPickersLocalization(ptBRPickers);

// node_modules/@mui/x-date-pickers/locales/trTR.js
var trTRPickers = {
  previousMonth: "\xD6nceki ay",
  nextMonth: "Sonraki ay",
  openPreviousView: "sonraki g\xF6r\xFCn\xFCm",
  openNextView: "\xF6nceki g\xF6r\xFCn\xFCm",
  start: "Ba\u015Flang\u0131\xE7",
  end: "Biti\u015F",
  cancelButtonLabel: "iptal",
  clearButtonLabel: "Temizle",
  okButtonLabel: "Tamam",
  todayButtonLabel: "Bug\xFCn"
};
var trTR = getPickersLocalization(trTRPickers);

// node_modules/@mui/x-date-pickers/locales/deDE.js
var views = {
  hours: "Stunden",
  minutes: "Minuten",
  seconds: "Sekunden"
};
var deDEPickers = {
  previousMonth: "Letzter Monat",
  nextMonth: "N\xE4chster Monat",
  openPreviousView: "Letzte Ansicht \xF6ffnen",
  openNextView: "N\xE4chste Ansicht \xF6ffnen",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "Jahresansicht ist ge\xF6ffnet, zur Kalenderansicht wechseln" : "Kalenderansicht ist ge\xF6ffnet, zur Jahresansicht wechseln",
  start: "Beginn",
  end: "Ende",
  cancelButtonLabel: "Abbrechen",
  clearButtonLabel: "L\xF6schen",
  okButtonLabel: "OK",
  todayButtonLabel: "Heute",
  clockLabelText: (view, time, adapter) => {
    var _views$view;
    return `${(_views$view = views[view]) != null ? _views$view : view} ausw\xE4hlen. ${time === null ? "Keine Uhrzeit ausgew\xE4hlt" : `Gew\xE4hlte Uhrzeit ist ${adapter.format(time, "fullTime")}`}`;
  },
  hoursClockNumberText: (hours) => `${hours} ${views.hours}`,
  minutesClockNumberText: (minutes) => `${minutes} ${views.minutes}`,
  secondsClockNumberText: (seconds) => `${seconds}  ${views.seconds}`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Datum ausw\xE4hlen, gew\xE4hltes Datum ist ${utils.format(utils.date(rawValue), "fullDate")}` : "Datum ausw\xE4hlen",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Uhrzeit ausw\xE4hlen, gew\xE4hlte Uhrzeit ist ${utils.format(utils.date(rawValue), "fullTime")}` : "Uhrzeit ausw\xE4hlen",
  timeTableLabel: "Uhrzeit ausw\xE4hlen",
  dateTableLabel: "Datum ausw\xE4hlen"
};
var deDE = getPickersLocalization(deDEPickers);

// node_modules/@mui/x-date-pickers/locales/esES.js
var views2 = {
  hours: "las horas",
  minutes: "los minutos",
  seconds: "los segundos"
};
var esESPickers = {
  previousMonth: "\xDAltimo mes",
  nextMonth: "Pr\xF3ximo mes",
  openPreviousView: "abrir la \xFAltima vista",
  openNextView: "abrir la siguiente vista",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "la vista del a\xF1o est\xE1 abierta, cambie a la vista de calendario" : "la vista de calendario est\xE1 abierta, cambie a la vista del a\xF1o",
  start: "Empezar",
  end: "Terminar",
  cancelButtonLabel: "Cancelar",
  clearButtonLabel: "Limpia",
  okButtonLabel: "OK",
  todayButtonLabel: "Hoy",
  clockLabelText: (view, time, adapter) => `Seleccione ${views2[view]}. ${time === null ? "Sin tiempo seleccionado" : `El tiempo seleccionado es ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} horas`,
  minutesClockNumberText: (minutes) => `${minutes} minutos`,
  secondsClockNumberText: (seconds) => `${seconds} segundos`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Elige la fecha, la fecha elegida es ${utils.format(utils.date(rawValue), "fullDate")}` : "Elige la fecha",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Elige la hora, la hora elegido es ${utils.format(utils.date(rawValue), "fullTime")}` : "Elige la hora",
  timeTableLabel: "elige la fecha",
  dateTableLabel: "elige la hora"
};
var esES = getPickersLocalization(esESPickers);

// node_modules/@mui/x-date-pickers/locales/frFR.js
var views3 = {
  hours: "heures",
  minutes: "minutes",
  seconds: "secondes"
};
var frFRPickers = {
  previousMonth: "Mois pr\xE9c\xE9dent",
  nextMonth: "Mois suivant",
  openPreviousView: "Ouvrir la vue pr\xE9c\xE9dente",
  openNextView: "Ouvrir la vue suivante",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "La vue ann\xE9e est ouverte, ouvrir la vue calendrier" : "La vue calendrier est ouverte, ouvrir la vue ann\xE9e",
  start: "D\xE9but",
  end: "Fin",
  cancelButtonLabel: "Annuler",
  clearButtonLabel: "Vider",
  okButtonLabel: "OK",
  todayButtonLabel: "Aujourd'hui",
  clockLabelText: (view, time, adapter) => `Choix des ${views3[view]}. ${time === null ? "Aucune heure choisie" : `L'heure choisie est ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} heures`,
  minutesClockNumberText: (minutes) => `${minutes} minutes`,
  secondsClockNumberText: (seconds) => `${seconds} secondes`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir la date, la date s\xE9lectionn\xE9e est ${utils.format(utils.date(rawValue), "fullDate")}` : "Choisir la date",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir l'heure, l'heure s\xE9lectionn\xE9e est ${utils.format(utils.date(rawValue), "fullTime")}` : "Choisir l'heure",
  timeTableLabel: "choix de l'heure",
  dateTableLabel: "choix de la date"
};
var frFR = getPickersLocalization(frFRPickers);

// node_modules/@mui/x-date-pickers/locales/enUS.js
var enUSPickers = {
  previousMonth: "Previous month",
  nextMonth: "Next month",
  openPreviousView: "open previous view",
  openNextView: "open next view",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "year view is open, switch to calendar view" : "calendar view is open, switch to year view",
  start: "Start",
  end: "End",
  cancelButtonLabel: "Cancel",
  clearButtonLabel: "Clear",
  okButtonLabel: "OK",
  todayButtonLabel: "Today",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "No time selected" : `Selected time is ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} hours`,
  minutesClockNumberText: (minutes) => `${minutes} minutes`,
  secondsClockNumberText: (seconds) => `${seconds} seconds`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose date, selected date is ${utils.format(utils.date(rawValue), "fullDate")}` : "Choose date",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose time, selected time is ${utils.format(utils.date(rawValue), "fullTime")}` : "Choose time",
  timeTableLabel: "pick time",
  dateTableLabel: "pick date"
};
var DEFAULT_LOCALE = enUSPickers;
var enUS = getPickersLocalization(enUSPickers);

// node_modules/@mui/x-date-pickers/locales/nbNO.js
var nbNOPickers = {
  previousMonth: "Forrige m\xE5ned",
  nextMonth: "Neste m\xE5ned",
  openPreviousView: "\xE5pne forrige visning",
  openNextView: "\xE5pne neste visning",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "\xE5rsvisning er \xE5pen, bytt til kalendervisning" : "kalendervisning er \xE5pen, bytt til \xE5rsvisning",
  start: "Start",
  end: "Slutt",
  cancelButtonLabel: "Avbryt",
  clearButtonLabel: "Fjern",
  okButtonLabel: "OK",
  todayButtonLabel: "I dag",
  clockLabelText: (view, time, adapter) => `Velg ${view}. ${time === null ? "Ingen tid valgt" : `Valgt tid er ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} timer`,
  minutesClockNumberText: (minutes) => `${minutes} minutter`,
  secondsClockNumberText: (seconds) => `${seconds} sekunder`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Velg dato, valgt dato er ${utils.format(utils.date(rawValue), "fullDate")}` : "Velg dato",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Velg tid, valgt tid er ${utils.format(utils.date(rawValue), "fullTime")}` : "Velg tid",
  timeTableLabel: "velg tid",
  dateTableLabel: "velg dato"
};
var nbNO = getPickersLocalization(nbNOPickers);

// node_modules/@mui/x-date-pickers/locales/svSE.js
var svSEPickers = {
  previousMonth: "F\xF6reg\xE5ende m\xE5nad",
  nextMonth: "N\xE4sta m\xE5nad",
  openPreviousView: "\xF6ppna f\xF6reg\xE5ende vy",
  openNextView: "\xF6ppna n\xE4sta vy",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "\xE5rsvyn \xE4r \xF6ppen, byt till kalendervy" : "kalendervyn \xE4r \xF6ppen, byt till \xE5rsvy",
  start: "Start",
  end: "Slut",
  cancelButtonLabel: "Avbryt",
  clearButtonLabel: "Rensa",
  okButtonLabel: "OK",
  todayButtonLabel: "Idag",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "Ingen tid vald" : `Vald tid \xE4r ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} timmar`,
  minutesClockNumberText: (minutes) => `${minutes} minuter`,
  secondsClockNumberText: (seconds) => `${seconds} sekunder`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `V\xE4lj datum, valt datum \xE4r ${utils.format(utils.date(rawValue), "fullDate")}` : "V\xE4lj datum",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `V\xE4lj tid, vald tid \xE4r ${utils.format(utils.date(rawValue), "fullTime")}` : "V\xE4lj tid",
  timeTableLabel: "v\xE4lj tid",
  dateTableLabel: "v\xE4lj datum"
};
var svSE = getPickersLocalization(svSEPickers);

// node_modules/@mui/x-date-pickers/locales/itIT.js
var views4 = {
  hours: "le ore",
  minutes: "i minuti",
  seconds: "i secondi"
};
var itITPickers = {
  previousMonth: "Mese precedente",
  nextMonth: "Mese successivo",
  openPreviousView: "apri la vista precedente",
  openNextView: "apri la vista successiva",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "la vista dell'anno \xE8 aperta, passare alla vista del calendario" : "la vista dell'calendario \xE8 aperta, passare alla vista dell'anno",
  start: "Inizio",
  end: "Fine",
  cancelButtonLabel: "Cancellare",
  clearButtonLabel: "Sgomberare",
  okButtonLabel: "OK",
  todayButtonLabel: "Oggi",
  clockLabelText: (view, time, adapter) => `Seleziona ${views4[view]}. ${time === null ? "Nessun orario selezionato" : `L'ora selezionata \xE8 ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} ore`,
  minutesClockNumberText: (minutes) => `${minutes} minuti`,
  secondsClockNumberText: (seconds) => `${seconds} secondi`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Scegli la data, la data selezionata \xE8 ${utils.format(utils.date(rawValue), "fullDate")}` : "Scegli la data",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Scegli l'ora, l'ora selezionata \xE8 ${utils.format(utils.date(rawValue), "fullTime")}` : "Scegli l'ora",
  timeTableLabel: "scegli un ora",
  dateTableLabel: "scegli una data"
};
var itIT = getPickersLocalization(itITPickers);

// node_modules/@mui/x-date-pickers/locales/zhCN.js
var views5 = {
  hours: "\u5C0F\u65F6",
  minutes: "\u5206\u949F",
  seconds: "\u79D2"
};
var zhCNPickers = {
  previousMonth: "\u4E0A\u4E2A\u6708",
  nextMonth: "\u4E0B\u4E2A\u6708",
  openPreviousView: "\u524D\u4E00\u4E2A\u89C6\u56FE",
  openNextView: "\u4E0B\u4E00\u4E2A\u89C6\u56FE",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "\u5E74\u89C6\u56FE\u5DF2\u6253\u5F00\uFF0C\u5207\u6362\u4E3A\u65E5\u5386\u89C6\u56FE" : "\u65E5\u5386\u89C6\u56FE\u5DF2\u6253\u5F00\uFF0C\u5207\u6362\u4E3A\u5E74\u89C6\u56FE",
  start: "\u5F00\u59CB",
  end: "\u7ED3\u675F",
  cancelButtonLabel: "\u53D6\u6D88",
  clearButtonLabel: "\u6E05\u9664",
  okButtonLabel: "\u786E\u8BA4",
  todayButtonLabel: "\u4ECA\u5929",
  clockLabelText: (view, time, adapter) => `Select ${views5[view]}. ${time === null ? "\u672A\u9009\u62E9\u65F6\u95F4" : `\u5DF2\u9009\u62E9${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours}\u5C0F\u65F6`,
  minutesClockNumberText: (minutes) => `${minutes}\u5206\u949F`,
  secondsClockNumberText: (seconds) => `${seconds}\u79D2`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `\u9009\u62E9\u65E5\u671F\uFF0C\u5DF2\u9009\u62E9${utils.format(utils.date(rawValue), "fullDate")}` : "\u9009\u62E9\u65E5\u671F",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `\u9009\u62E9\u65F6\u95F4\uFF0C\u5DF2\u9009\u62E9${utils.format(utils.date(rawValue), "fullTime")}` : "\u9009\u62E9\u65F6\u95F4",
  timeTableLabel: "\u9009\u62E9\u65F6\u95F4",
  dateTableLabel: "\u9009\u62E9\u65E5\u671F"
};
var zhCN = getPickersLocalization(zhCNPickers);

// node_modules/@mui/x-date-pickers/LocalizationProvider/LocalizationProvider.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var MuiPickersAdapterContext = React.createContext(null);
if (true) {
  MuiPickersAdapterContext.displayName = "MuiPickersAdapterContext";
}
var warnedOnce = false;
function LocalizationProvider(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiLocalizationProvider"
  });
  const {
    children,
    dateAdapter: Utils,
    dateFormats,
    dateLibInstance,
    locale,
    adapterLocale,
    localeText
  } = props;
  if (true) {
    if (!warnedOnce && locale !== void 0) {
      warnedOnce = true;
      console.warn("LocalizationProvider's prop `locale` is deprecated and replaced by `adapterLocale`");
    }
  }
  const utils = React.useMemo(() => new Utils({
    locale: adapterLocale != null ? adapterLocale : locale,
    formats: dateFormats,
    instance: dateLibInstance
  }), [Utils, locale, adapterLocale, dateFormats, dateLibInstance]);
  const defaultDates = React.useMemo(() => {
    return {
      minDate: utils.date("1900-01-01T00:00:00.000"),
      maxDate: utils.date("2099-12-31T00:00:00.000")
    };
  }, [utils]);
  const contextValue = React.useMemo(() => {
    return {
      utils,
      defaultDates,
      localeText: _extends({}, DEFAULT_LOCALE, localeText != null ? localeText : {})
    };
  }, [defaultDates, utils, localeText]);
  return (0, import_jsx_runtime.jsx)(MuiPickersAdapterContext.Provider, {
    value: contextValue,
    children
  });
}
true ? LocalizationProvider.propTypes = {
  adapterLocale: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string]),
  children: import_prop_types.default.node,
  dateAdapter: import_prop_types.default.func.isRequired,
  dateFormats: import_prop_types.default.shape({
    dayOfMonth: import_prop_types.default.string,
    fullDate: import_prop_types.default.string,
    fullDateTime: import_prop_types.default.string,
    fullDateTime12h: import_prop_types.default.string,
    fullDateTime24h: import_prop_types.default.string,
    fullDateWithWeekday: import_prop_types.default.string,
    fullTime: import_prop_types.default.string,
    fullTime12h: import_prop_types.default.string,
    fullTime24h: import_prop_types.default.string,
    hours12h: import_prop_types.default.string,
    hours24h: import_prop_types.default.string,
    keyboardDate: import_prop_types.default.string,
    keyboardDateTime: import_prop_types.default.string,
    keyboardDateTime12h: import_prop_types.default.string,
    keyboardDateTime24h: import_prop_types.default.string,
    minutes: import_prop_types.default.string,
    month: import_prop_types.default.string,
    monthAndDate: import_prop_types.default.string,
    monthAndYear: import_prop_types.default.string,
    monthShort: import_prop_types.default.string,
    normalDate: import_prop_types.default.string,
    normalDateWithWeekday: import_prop_types.default.string,
    seconds: import_prop_types.default.string,
    shortDate: import_prop_types.default.string,
    weekday: import_prop_types.default.string,
    weekdayShort: import_prop_types.default.string,
    year: import_prop_types.default.string
  }),
  dateLibInstance: import_prop_types.default.any,
  locale: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string]),
  localeText: import_prop_types.default.object
} : void 0;

export {
  getUnit,
  toUnitless,
  MuiPickersAdapterContext,
  LocalizationProvider
};
//# sourceMappingURL=chunk-PTDQ36WC.js.map
